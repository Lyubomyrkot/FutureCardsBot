import telebot
import json
import os
from telebot import types
import random

bot = telebot.TeleBot('8326718314:AAHo0QDvdlLKiQnA6kIpEQWGoxU9a1iNGXk')

USERS_FILE = "users.json"

# –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
users_data = {}
if os.path.exists(USERS_FILE):
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if content:  # —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
                users_data = json.loads(content)
    except json.JSONDecodeError:
        users_data = {}  # —è–∫—â–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞

# —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def save_user(user_id, first_name, last_name, lang):
    users_data[str(user_id)] = {
        "first_name": first_name,
        "last_name": last_name,
        "language": lang
    }
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users_data, f, ensure_ascii=False, indent=4)

# –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ä—Ç–∏ –∑ JSON
with open("cards.json", "r", encoding="utf-8") as f:
    cards_data = json.load(f)

# —Å—Ç–≤–æ—Ä—é—î–º–æ 36 –∫–∞—Ä—Ç (–∫–ª—é—á—ñ —Ç–∞–∫—ñ –∂, —è–∫ —É JSON: "6‚ô•", "7‚ô•" —ñ —Ç.–¥.)
suits = ["‚ô•", "‚ô†", "‚ô¶", "‚ô£"]
ranks = ["6", "7", "8", "9", "10", "J", "Q", "K", "A"]
deck = [f"{r}{s}" for s in suits for r in ranks]

# —Ç—É—Ç –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤–∏–±—Ä–∞–Ω–∞ –º–æ–≤–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —é–∑–µ—Ä–∞
user_langs = {}

# —Ç–µ–∫—Å—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤
texts = {
    "uk": {
        "choose_theme": "–¢–µ–ø–µ—Ä –º–æ–∂–µ—à –≤–∏—Ç—è–≥—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏!",
        "buttons": ["üé¥ –í–∏—Ç—è–≥–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É (–ö–æ—Ö–∞–Ω–Ω—è)", "üé¥ –í–∏—Ç—è–≥–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É (–ú–∞–π–±—É—Ç–Ω—î)", "üé¥ –í–∏—Ç—è–≥–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É (–ë–∞–≥–∞—Ç—Å—Ç–≤–æ)", "üé¥ –í–∏—Ç—è–≥–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É (–î—Ä—É–∂–±–∞)"],
        "your_card": "–¢–≤–æ—è –∫–∞—Ä—Ç–∞"
    },
    "en": {
        "choose_theme": "Now you can draw cards!",
        "buttons": ["üé¥ Draw a card (Love)", "üé¥ Draw a card (Future)", "üé¥ Draw a card (Wealth)", "üé¥ Draw a card (Friendship)"],
        "your_card": "Your card"
    }
}

# —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard(lang):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for btn in texts[lang]["buttons"]:
        markup.add(types.KeyboardButton(btn))
    return markup

#–û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∫—É —Å—Ç–∞—Ä—Ç –¥–µ –∑—Ä–∞–∑—É –¥–∞—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏
@bot.message_handler(commands=['start'])
def start(message):
    #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —é–∑–µ—Ä –≤–∂–µ –≤–∏–±—Ä–∞–≤ –º–æ–≤—É
    user_id = message.chat.id
    if user_id not in user_langs:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶")
        btn2 = types.KeyboardButton("English üá¨üáß")
        markup.add(btn1, btn2)

        bot.send_message(
            message.chat.id, 
            "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose your language", 
            reply_markup=markup)
    else:
        # —è–∫—â–æ –º–æ–≤–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞, –≤—ñ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–∞—Ä—Ç
        lang = user_langs[user_id]
        markup_card = get_main_keyboard(lang)
        bot.send_message(
            user_id,
            texts[lang]["choose_theme"],
            reply_markup=markup_card
        )
    
#–û–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏
@bot.message_handler(func=lambda message: message.text in ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "English üá¨üáß"])
def choose_language(message):
    user_id = message.chat.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    if message.text == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶":
        user_langs[message.chat.id] = 'uk'
        bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É. –í–≤–µ–¥—ñ—Ç—å /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")
    else:
        user_langs[message.chat.id] = 'en'
        bot.send_message(message.chat.id, "You have chosen English. Type /help to get the list of commands.")

    lang = user_langs[message.chat.id]
    save_user(user_id, first_name, last_name, lang)

    markup_card = get_main_keyboard(lang)
    
    bot.send_message(message.chat.id, texts[lang]["choose_theme"], reply_markup=markup_card)

@bot.message_handler(func=lambda m: any(m.text in texts[lang]["buttons"] for lang in texts))
def draw_card(message):
    chat_id = message.chat.id
    lang = user_langs.get(chat_id, "en")  # –º–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    # –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–º—É
    if message.text in [texts["uk"]["buttons"][0], texts["en"]["buttons"][0]]:
        theme = "love"
    elif message.text in [texts["uk"]["buttons"][1], texts["en"]["buttons"][1]]:
        theme = "future"
    elif message.text in [texts["uk"]["buttons"][2], texts["en"]["buttons"][2]]:
        theme = "wealth"
    elif message.text in [texts["uk"]["buttons"][3], texts["en"]["buttons"][3]]:
        theme = "friendship"

    # –≤–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫–∞—Ä—Ç—É
    card = random.sample(deck, 4)

    # –¥—ñ—Å—Ç–∞—î–º–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∑ JSON
    msg = ""
    for card in card:
        predictions = cards_data[card][theme][lang]
        prediction = random.choice(predictions)
        msg += f"{texts[lang]['your_card']}: {card}\n{prediction}\n\n"

    bot.send_message(chat_id, msg)


@bot.message_handler(commands=['lang'])
def change_language(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk"))
    markup.add(types.InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"))
    bot.send_message(
        message.chat.id, 
        "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:", 
        reply_markup=markup)
    
# –∫–æ–ª–∏ –∑–º—ñ–Ω—é—î–º–æ –º–æ–≤—É —á–µ—Ä–µ–∑ /lang    
@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    user_id = call.from_user.id
    lang = call.data.split("_")[1]
    user_langs[user_id] = lang

    # üîÑ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ users.json
    first_name = call.from_user.first_name
    last_name = call.from_user.last_name
    save_user(user_id, first_name, last_name, lang)

    if lang == "uk":
        bot.answer_callback_query(call.id, "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É üá∫üá¶")
        bot.edit_message_text("‚úÖ –¢–µ–ø–µ—Ä –±–æ—Ç –ø—Ä–∞—Ü—é—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.", call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "Language switched to English üá¨üáß")
        bot.edit_message_text("‚úÖ Bot now works in English.", call.message.chat.id, call.message.message_id)

    # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏
    markup_card = get_main_keyboard(lang)
    bot.send_message(call.message.chat.id, texts[lang]["choose_theme"], reply_markup=markup_card)

@bot.message_handler(commands=['help'])
def help_command(message):
    lang = user_langs.get(message.chat.id, "en")
    if lang == "uk":
        help_text = (
            "üìñ *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
            "‚ú® –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "‚ñ´Ô∏è /start ‚Äì –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º\n"
            "‚ñ´Ô∏è /help ‚Äì –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            "‚ñ´Ô∏è /lang ‚Äì –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –±–æ—Ç–∞\n\n"
            "üé¥ *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å*: \n"
            "–ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ —Ç–∏ –º–æ–∂–µ—à –≤–∏—Ç—è–≥—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏ –Ω–∞ —Ç–µ–º—É –∫–æ—Ö–∞–Ω–Ω—è üíï, —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ üí∞, –¥—Ä—É–∂–±–∏ ü§ù –∞–±–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ üîÆ."
        )
    else:
        help_text = (
            "üìñ *Bot Guide*\n\n"
            "‚ú® Main commands:\n"
            "‚ñ´Ô∏è /start ‚Äì Start interaction with the bot\n"
            "‚ñ´Ô∏è /help ‚Äì Show this message\n"
            "‚ñ´Ô∏è /lang ‚Äì Change bot language\n\n"
            "üé¥ *How to use*: \n"
            "After choosing a language, you can draw cards on the theme of love üíï, wealth üí∞, friendship ü§ù, or future üîÆ."
        )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

bot.polling(none_stop=True)